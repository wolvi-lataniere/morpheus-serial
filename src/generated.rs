// This file is autogenerated, please do not edit manually
use std::convert::TryInto;

use serde_derive::Serialize;


#[derive(PartialEq, Eq, Clone)]
pub enum Instructions {
    GetVersion{},
	SleepTime{duration: u32}
}


#[derive(PartialEq, Eq, Clone, Debug, Serialize)]
pub enum Feedbacks {
    GetVersion{major: u8,minor: u8,patch: u8},
	SleepTime{feedback: u8}
}




impl Feedbacks {
    pub fn to_bytes(self) -> Vec<u8> {
        match self {
            Self::GetVersion{major,minor,patch} => vec![&[0u8] as &[u8],&[major] as &[u8],&[minor] as &[u8],&[patch] as &[u8]].concat(),
			Self::SleepTime{feedback} => vec![&[4u8] as &[u8],&[feedback] as &[u8]].concat()
        }
    }

    pub fn from_bytes(bytes: &[u8]) -> Result<Self, ()> {
        match bytes[0] {
            0u8 => {
                let major = bytes[1];
				let minor = bytes[2];
				let patch = bytes[3];

                Ok(Self::GetVersion{major, minor, patch})
            }
                ,
			4u8 => {
                let feedback = bytes[1];

                Ok(Self::SleepTime{feedback})
            }
                ,
    _ => Err(())
        }
    }
}

impl Instructions {
    pub fn to_bytes(self) -> Vec<u8> {
        match self {
    Self::GetVersion{} => vec![&[0u8] as &[u8],].concat(),
			Self::SleepTime{duration} => vec![&[4u8] as &[u8],&duration.to_le_bytes()].concat()
        }
    }

    pub fn from_bytes(bytes: &[u8]) -> Result<Self, ()> {
        match bytes[0] {
            0u8 => {
                
                Ok(Self::GetVersion{})
            }
                ,
			4u8 => {
                let duration = u32::from_le_bytes(bytes[1..5].try_into().unwrap());

                Ok(Self::SleepTime{duration})
            }
                ,
    _ => Err(())
        }
    }
}
